# Use the official docker image.
image: docker:20.10.23-git

# This file is a template, and might need editing before it works on your project.
# To contribute improvements to CI/CD templates, please follow the Development guide at:
# https://docs.gitlab.com/ee/development/cicd/templates.html
# This specific template is located at:
# https://gitlab.com/gitlab-org/gitlab/-/blob/master/lib/gitlab/ci/templates/Docker.gitlab-ci.yml

# Build a Docker image with CI/CD and push to the GitLab registry.
# Docker-in-Docker documentation: https://docs.gitlab.com/ee/ci/docker/using_docker_build.html
#
# This template uses one generic job with conditional builds
# for the default branch and all other (MR) branches.
variables:
  # When using dind service, you must instruct Docker to talk with
  # the daemon started inside of the service. The daemon is available
  # with a network connection instead of the default
  # /var/run/docker.sock socket.
  DOCKER_HOST: tcp://docker:2376
  #
  # The 'docker' hostname is the alias of the service container as described at
  # https://docs.gitlab.com/ee/ci/services/#accessing-the-services.
  # If you're using GitLab Runner 12.7 or earlier with the Kubernetes executor and Kubernetes 1.6 or earlier,
  # the variable must be set to tcp://localhost:2376 because of how the
  # Kubernetes executor connects services to the job container
  # DOCKER_HOST: tcp://localhost:2376
  #
  # Specify to Docker where to create the certificates. Docker
  # creates them automatically on boot, and creates
  # `/certs/client` to share between the service and job
  # container, thanks to volume mount from config.toml
  DOCKER_TLS_CERTDIR: "/certs"
  # These are usually specified by the entrypoint, however the
  # Kubernetes executor doesn't run entrypoints
  # https://gitlab.com/gitlab-org/gitlab-runner/-/issues/4125
  DOCKER_TLS_VERIFY: 1
  DOCKER_CERT_PATH: "$DOCKER_TLS_CERTDIR/client"

docker-build:
  tags:
    - desktop
  stage: build
  services:
    - docker:20.10.23-dind
  before_script:
    - echo "$CI_REGISTRY_PASSWORD" | docker login $CI_REGISTRY -u "$CI_REGISTRY_USER" --password-stdin 
    - echo "$DOCKER_HUB_PASSWORD" |  docker login  -u "$DOCKER_HUB_USERNAME" --password-stdin 
  # Default branch leaves tag empty (= latest tag)
  # All other branches are tagged with the escaped branch name (commit ref slug)
  script:
    - |
      if [[ "$CI_COMMIT_BRANCH" == "$CI_DEFAULT_BRANCH" ]]; then
        tag="latest"
        echo "Running on default branch '$CI_DEFAULT_BRANCH': tag = '$tag'"
      else
        tag="${CI_COMMIT_REF_NAME:1}"
        echo "Running on branch '$CI_COMMIT_BRANCH': tag = $tag"
      fi
    - docker context create builders
    - docker buildx create builders --use
    - |
       docker buildx build --push --platform=linux/arm64 --platform=linux/amd64 \
         -t "$CI_REGISTRY_IMAGE:${tag}" \
         -t "docker.io/${DOCKER_HUB_USERNAME}/${CI_PROJECT_NAME}:${tag}" \
         -f Dockerfile .
  # Run this job only when Dockerfile changes
  rules:
    - if: $CI_COMMIT_TAG
    - if: $CI_COMMIT_BRANCH
      changes: 
       - Dockerfile
       - .gitlab-ci.yml
